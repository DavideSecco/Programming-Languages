<?xml version="1.0"?><st-source><component-created><name>Programming Languages</name> <type>package</type></component-created><component-property><name>Programming Languages</name> <type>package</type><property>comment</property> <value>'Prova'</value></component-property><class><name>Wielokat</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>wierzcholki nazwa </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JezykiProgramowania</category><attributes><package>Programming Languages</package></attributes></class><do-it>Object subclass: #Wielokat	instanceVariableNames: 'wierzcholki nazwa '	classVariableNames: ''	poolDictionaries: ''	category: 'JezykiProgramowania'</do-it><methods><class-id>Wielokat</class-id> <category>initialize-release</category><body package="Programming Languages" selector="initialize:name:">initialize: liczbaWierzcholkow name: nowaNazwa	"konstruktor obiektu - wielokata"	nazwa:=nowaNazwa.	wierzcholki:=Array new: liczbaWierzcholkow.	wierzcholki at: 1 put: 0@0.</body></methods><methods><class-id>Wielokat</class-id> <category>accessing</category><body package="Programming Languages" selector="nazwa">nazwa	"podaje nazwe wielokata"	^nazwa</body></methods><methods><class-id>Wielokat</class-id> <category>accessing</category><body package="Programming Languages" selector="nazwa:">nazwa: nowa_nazwa	"ustawia nowa nazwe wielokata"	nazwa:=nowa_nazwa</body></methods><class><name>Kwadrat</name><environment>Smalltalk</environment><super>Wielokat</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JezykiProgramowania</category><attributes><package>Programming Languages</package></attributes></class><do-it>Wielokat subclass: #Kwadrat	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'JezykiProgramowania'</do-it><methods><class-id>Kwadrat</class-id> <category>arithmetic</category><body package="Programming Languages" selector="+">+ figura	"dodaj 2 figury w sensie pola"	| p |	p:=self pole + figura pole.	^(Kwadrat new) initialize: p sqrt</body></methods><methods><class-id>Kwadrat</class-id> <category>actions</category><body package="Programming Languages" selector="pole">pole	"licz pole kwadratu"	^(wierzcholki at: 2) x squared</body></methods><methods><class-id>Kwadrat</class-id> <category>initialize-release</category><body package="Programming Languages" selector="initialize:">initialize: bok	"tworz kwadrat o podanym boku"	super initialize: 4 name: 'Kwadrat'.	wierzcholki at: 2 put: bok@0.	wierzcholki at: 3 put: bok@bok.	wierzcholki at: 4 put: 0@bok.</body></methods><component-created><name>Programming Languages</name> <type>package</type></component-created><component-property><name>Programming Languages</name> <type>package</type><property>comment</property> <value>'Programs for the Programming Languages course.'</value></component-property><class><name>Wielokat</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>wierzcholki nazwa </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JezykiProgramowania</category><attributes><package>Programming Languages</package></attributes></class><do-it>Object subclass: #Wielokat	instanceVariableNames: 'wierzcholki nazwa '	classVariableNames: ''	poolDictionaries: ''	category: 'JezykiProgramowania'</do-it><methods><class-id>Wielokat</class-id> <category>initialize-release</category><body package="Programming Languages" selector="initialize:name:">initialize: liczbaWierzcholkow name: nowaNazwa	"konstruktor obiektu - wielokata"	nazwa:=nowaNazwa.	wierzcholki:=Array new: liczbaWierzcholkow.	wierzcholki at: 1 put: 0@0.</body></methods><methods><class-id>Wielokat</class-id> <category>accessing</category><body package="Programming Languages" selector="nazwa">nazwa	"podaje nazwe wielokata"	^nazwa</body></methods><methods><class-id>Wielokat</class-id> <category>accessing</category><body package="Programming Languages" selector="nazwa:">nazwa: nowa_nazwa	"ustawia nowa nazwe wielokata"	nazwa:=nowa_nazwa</body></methods><class><name>Kwadrat</name><environment>Smalltalk</environment><super>Wielokat</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JezykiProgramowania</category><attributes><package>Programming Languages</package></attributes></class><do-it>Wielokat subclass: #Kwadrat	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'JezykiProgramowania'</do-it><methods><class-id>Kwadrat</class-id> <category>arithmetic</category><body package="Programming Languages" selector="+">+ figura	"dodaj 2 figury w sensie pola"	| p |	p:=self pole + figura pole.	^(Kwadrat new) initialize: p sqrt</body></methods><methods><class-id>Kwadrat</class-id> <category>actions</category><body package="Programming Languages" selector="pole">pole	"licz pole kwadratu"	^(wierzcholki at: 2) x squared</body></methods><methods><class-id>Kwadrat</class-id> <category>initialize-release</category><body package="Programming Languages" selector="initialize:">initialize: bok	"tworz kwadrat o podanym boku"	super initialize: 4 name: 'Kwadrat'.	wierzcholki at: 2 put: bok@0.	wierzcholki at: 3 put: bok@bok.	wierzcholki at: 4 put: 0@bok.</body></methods><class><name>Rhombus</name><environment>Smalltalk</environment><super>Wielokat</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Programming Languages</package></attributes></class><do-it>Rhombus organization addCategory: #area</do-it><do-it>Rhombus organization removeCategory: #area</do-it><do-it>Rhombus organization addCategory: #actions</do-it><do-it>Rhombus organization addCategory: #prova</do-it><do-it>Rhombus organization removeCategory: #prova</do-it><methods><class-id>Rhombus class</class-id> <category>instance creation</category><body package="Programming Languages" selector="mod10">mod10	"ret"		^self rem: 10</body></methods><do-it>Rhombus class organization addCategory: #prova</do-it><remove-selector><class-id>Rhombus class</class-id> <selector>mod10</selector></remove-selector><do-it>Rhombus class organization removeCategory: #'instance creation'</do-it><do-it>Rhombus class organization addCategory: #'initialize-release'</do-it><do-it>Rhombus class organization addCategory: #arithmetic</do-it><do-it>Rhombus class organization addCategory: #action</do-it><do-it>Rhombus class organization removeCategory: #prova</do-it><methods><class-id>Rhombus class</class-id> <category>class initialization</category><body package="Programming Languages" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><do-it>Rhombus class organization removeCategory: #action</do-it><do-it>Rhombus class organization removeCategory: #arithmetic</do-it><remove-selector><class-id>Rhombus class</class-id> <selector>initialize</selector></remove-selector><do-it>Rhombus class organization removeCategory: #'class initialization'</do-it><do-it>Rhombus class organization removeCategory: #'initialize-release'</do-it><do-it>Rhombus organization addCategory: #arithmetic</do-it><do-it>Rhombus organization addCategory: #'initialize-release'</do-it><methods><class-id>Rhombus</class-id> <category>initialize-release</category><body package="Programming Languages" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Rhombus</class-id> <category>initialize-release</category><body package="Programming Languages" selector="initialize:">initialize: bok	"tworz kwadrat o podanym boku"	super initialize: 6 name: 'Szesciokat'.	wierzcholki at: 2 put: bok@0.	wierzcholki at: 3 put: (bok * 1.5)@(bok * 3 sqrt * 0.5).	wierzcholki at: 4 put: bok@(bok * 3 sqrt).	wierzcholki at: 5 put: 0@(bok * 3 sqrt).	wierzcholki at: 6 put: (0 - (bok * 0.5))@(bok * 3 sqrt * 0.5).</body></methods><methods><class-id>Rhombus</class-id> <category>initialize-release</category><body package="Programming Languages" selector="initialize:">initialize: bok "== side"	"tworz kwadrat o podanym boku"	| height |	super initialize: 6 name: 'Szesciokat'.	height:=((3 square) / 2)*bok.	wierzcholki at: 2 put: bok@0.	wierzcholki at: 3 put: (bok+bok/2)@bok.	wierzcholki at: 4 put: (bok/2)@bok.	"bok == side""wierzcholki == vertice"</body></methods><methods><class-id>Rhombus</class-id> <category>initialize-release</category><body package="Programming Languages" selector="initialize:">initialize: bok "== side"	"tworz kwadrat o podanym boku"	| value |	super initialize: 6 name: 'Szesciokat'.	value:=((3 squared) / 2)*bok.	wierzcholki at: 2 put: bok@0.	wierzcholki at: 3 put: (bok+bok/2)@value.	wierzcholki at: 4 put: (bok/2)@value.	"bok == side""wierzcholki == vertice"</body></methods><methods><class-id>Rhombus</class-id> <category>actions</category><body package="Programming Languages" selector="area">area 	"liczy pole szesciokata"		| a b |	a := (wierzcholki at: 2) x.	b := (wierzcholki at: 2) y.		a&lt;b	ifTrue: [^b squared * 3 * 3 sqrt * 0.5] ifFalse: [^a squared * 3 * 3 sqrt * 0.5].</body></methods><methods><class-id>Rhombus</class-id> <category>initialize-release</category><body package="Programming Languages" selector="initialize:">initialize: bok "== side"	"tworz kwadrat o podanym boku"	| height |	super initialize: 6 name: 'Szesciokat'.	height:=((3 squared) / 2)*bok.	wierzcholki at: 2 put: bok@0.	wierzcholki at: 3 put: (bok+bok/2)@height.	wierzcholki at: 4 put: (bok/2)@height.	"bok == side""wierzcholki == vertice"</body></methods><methods><class-id>Rhombus</class-id> <category>actions</category><body package="Programming Languages" selector="area">area 	"liczy pole szesciokata"		| side height |	side := (wierzcholki at: 2) x.	height:=((3 squared) / 2)*side.		^ side * height.	</body></methods><methods><class-id>Rhombus</class-id> <category>arithmetic</category><body package="Programming Languages" selector="+">+ figura	"dodaj 2 figury w sensie pola"	"add 2 figures in the sense of a field"</body></methods><methods><class-id>Rhombus</class-id> <category>arithmetic</category><body package="Programming Languages" selector="+">+ figura	"dodaj 2 figury w sensie pola"	"add 2 figures in the sense of a field"	"aggiungi 2 cifre nel senso di un campo"</body></methods><methods><class-id>Rhombus</class-id> <category>arithmetic</category><body package="Programming Languages" selector="+">+ figura	"dodaj 2 figury w sensie pola"	"add 2 figures in the sense of a field"	"aggiungi 2 cifre nel senso di un campo"		| p new |	p:=self area + figura area.</body></methods><methods><class-id>Rhombus</class-id> <category>arithmetic</category><body package="Programming Languages" selector="+">+ figura	"dodaj 2 figury w sensie pola"	"add 2 figures in the sense of a field"	"aggiungi 2 cifre nel senso di un campo"		| newArea new side newRhombus |	newArea:=self area + figura area.	side := (newArea *2 / (3 sqrt)) sqrt.	new:= (Rhombus new) initialize: side.	^new		"A = ((radice 3 ) / 4 ) L^2 --&gt; this is the formule for triangolo equilatero"</body></methods><methods><class-id>Rhombus</class-id> <category>arithmetic</category><body package="Programming Languages" selector="+">+ figura	"dodaj 2 figury w sensie pola"	"add 2 figures in the sense of a field"	"aggiungi 2 cifre nel senso di un campo"		| newArea side newRhombus |	newArea:=self area + figura area.	side := (newArea *2 / (3 sqrt)) sqrt.	newRhombus:= (Rhombus new) initialize: side.	^newRhombus		"A = ((radice 3 ) / 4 ) L^2 --&gt; this is the formule for triangolo equilatero"</body></methods><methods><class-id>Rhombus</class-id> <category>arithmetic</category><body package="Programming Languages" selector="+">+ figura	"dodaj 2 figury w sensie pola"	"add 2 figures in the sense of a field"	"aggiungi 2 cifre nel senso di un campo"		| newArea side newRhombus |		newArea:=self area + figura area.					"Calc the new area"	side := (newArea *2 / (3 sqrt)) sqrt.				"Calc the value of side from the new area"	newRhombus:= (Rhombus new) initialize: side.		"Create a rhombus"	^newRhombus									"return the rhombus"		"A = ((radice 3 ) / 4 ) L^2 --&gt; this is the formule for triangolo equilatero"</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im' 'January 11, 2022' '4:11:52 PM')""An image file d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im was created at 16:11:52 on 11 gennaio 2022."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im' 'January 11, 2022' '4:12:04 PM')""An image file d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im was created at 16:12:04 on 11 gennaio 2022."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im' 'January 11, 2022' '4:12:15 PM')""An image file d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im was created at 16:12:15 on 11 gennaio 2022."</do-it><methods><class-id>Wielokat</class-id> <category>accessing</category><body package="Programming Languages" selector="drukuj">drukuj "print"	"stampa le informazioni su un poligono"		Transcript show: nazwa printString.	Transcript show: ''; cr.  	Transcript show: self pole printString.	Transcript show: ''; cr.  	1 to: (wierzcholki capacity) do: [:i|  	Transcript show: ' Nr: '.	Transcript show: (i printString).	Transcript show: ' x: '.	Transcript show: (wierzcholki at: i) x printString.	Transcript show: ' y: '.	Transcript show: (wierzcholki at: i) y printString.	Transcript show: ''; cr.  	]."Stampa""stampa le informazioni su un poligono"</body></methods><do-it>Rhombus renameTo: #Romb</do-it><methods><class-id>Romb</class-id> <category>arithmetic</category><body package="Programming Languages" selector="+">+ figura	"dodaj 2 figury w sensie pola"	"add 2 figures in the sense of a field"	"aggiungi 2 cifre nel senso di un campo"		| newArea side newRhombus |		newArea:=self area + figura area.					"Calc the new area"	side := (newArea *2 / (3 sqrt)) sqrt.				"Calc the value of side from the new area"	newRhombus:= (Romb new) initialize: side.		"Create a rhombus"	^newRhombus									"return the rhombus"		"A = ((radice 3 ) / 4 ) L^2 --&gt; this is the formule for triangolo equilatero"</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im' 'January 11, 2022' '4:20:17 PM')""An image file d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im was created at 16:20:17 on 11 gennaio 2022."</do-it><comment><class-id>Wielokat</class-id><body>Wielokat has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	nazwa	&lt;AbstractProxy | MessageArchiver | Object | ProtoObject&gt;	description of nazwa	wierzcholki	&lt;(Collection of: Point)&gt;	description of wierzcholki</body></comment><comment><class-id>Kwadrat</class-id><body>Kwadrat has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><comment><class-id>Romb</class-id><body>Romb has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><methods><class-id>Romb</class-id> <category>actions</category><body package="Programming Languages" selector="pole">pole 	"liczy pole szesciokata"		| side height |	side := (wierzcholki at: 2) x.	height:=((3 squared) / 2)*side.		^ side * height.</body></methods><remove-selector><class-id>Romb</class-id> <selector>area</selector></remove-selector><methods><class-id>Romb</class-id> <category>arithmetic</category><body package="Programming Languages" selector="+">+ figura	"dodaj 2 figury w sensie pola"	"add 2 figures in the sense of a field"	"aggiungi 2 cifre nel senso di un campo"		| newArea side newRhombus |		newArea:=self pole + figura pole.					"Calc the new area"	side := (newArea *2 / (3 sqrt)) sqrt.				"Calc the value of side from the new area"	newRhombus:= (Romb new) initialize: side.		"Create a rhombus"	^newRhombus									"return the rhombus"		"A = ((radice 3 ) / 4 ) L^2 --&gt; this is the formule for triangolo equilatero"</body></methods><methods><class-id>Romb</class-id> <category>actions</category><body package="Programming Languages" selector="pole">pole 	"liczy pole szesciokata"		| side height |	side := (wierzcholki at: 2) x.	height:=((3 squared) / 2)*side.		^ (side * height).</body></methods><methods><class-id>Romb</class-id> <category>initialize-release</category><body package="Programming Languages" selector="initialize:">initialize: bok "== side"	"tworz kwadrat o podanym boku"	| height |	super initialize: 4 name: 'Romb'.	height:=((3 squared) / 2)*bok.	wierzcholki at: 2 put: bok@0.	wierzcholki at: 3 put: (bok+bok/2)@height.	wierzcholki at: 4 put: (bok/2)@height.	"bok == side""wierzcholki == vertice"</body></methods><do-it>| r |	r := (Romb new) initialize: 4.	r drukuj.</do-it><methods><class-id>Romb</class-id> <category>initialize-release</category><body package="Programming Languages" selector="initialize:">initialize: bok "== side"	"tworz kwadrat o podanym boku"	| height |	super initialize: 4 name: 'Romb'.	height:=((3 sqrt) / 2)*bok.	wierzcholki at: 2 put: bok@0.	wierzcholki at: 3 put: (bok+bok/2)@height.	wierzcholki at: 4 put: (bok/2)@height.	"bok == side""wierzcholki == vertice"</body></methods><do-it>| r |	r := (Romb new) initialize: 4.r drukuj.</do-it><do-it>| r k |	r := (Romb new) initialize: 4.r drukuj.k := (Kwadrat new) initialize: 2.k drukuj.</do-it><do-it>17 // 5</do-it><do-it>17 // 5</do-it><do-it>5/2.</do-it><do-it>5/5.</do-it><do-it>10//3</do-it><do-it>10/3</do-it><do-it>| r k |	r := (Romb new) initialize: 4.r drukuj.k := (Kwadrat new) initialize: 2.k drukuj.</do-it><do-it>| r k |	r := (Romb new) initialize: 4.r drukuj.k := (Kwadrat new) initialize: 2.k drukuj.</do-it><methods><class-id>Romb</class-id> <category>initialize-release</category><body package="Programming Languages" selector="initialize:">initialize: bok "== side"	"tworz kwadrat o podanym boku"	| height |	super initialize: 4 name: 'Romb'.	height:=((3 sqrt)/2)*bok.	wierzcholki at: 2 put: bok@0.	wierzcholki at: 3 put: (bok + bok/2)@height.	wierzcholki at: 4 put: (bok/2)@height.	"bok == side""wierzcholki == vertice"</body></methods><methods><class-id>Romb</class-id> <category>initialize-release</category><body package="Programming Languages" selector="initialize:">initialize: bok "== side"	"tworz kwadrat o podanym boku"	| height |	super initialize: 4 name: 'Romb'.	height:=((3 sqrt)/2)*bok.	wierzcholki at: 2 put: bok@0.	wierzcholki at: 3 put: (bok + (bok/2))@height.	wierzcholki at: 4 put: (bok/2)@height.	"bok == side""wierzcholki == vertice"</body></methods><do-it>| k |	k := (Kwadrat new) initialize: 2.k drukuj</do-it><do-it>| r k |	r := (Romb new) initialize: 4.r drukuj.k := (Kwadrat new) initialize: 2.k drukuj.Transcript show: 'r+r'; cr.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im' 'January 11, 2022' '5:28:26 PM')""An image file d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im was created at 17:28:26 on 11 gennaio 2022."</do-it><do-it>| r k |	r := (Romb new) initialize: 4.r drukuj.k := (Kwadrat new) initialize: 2.k drukuj.Transcript show: 'r+r'; cr.</do-it><methods><class-id>Romb</class-id> <category>actions</category><body package="Programming Languages" selector="pole">pole 	"liczy pole szesciokata"		| side height |	side := (wierzcholki at: 2) x.	height:=((3 sqrt) / 2)*side.		^ (side * height).</body></methods><methods><class-id>Wielokat</class-id> <category>accessing</category><body package="Programming Languages" selector="drukuj">drukuj "print"	"stampa le informazioni su un poligono"		Transcript show: nazwa printString.	Transcript show: ''; cr.  	Transcript show: 'Area = '.  	Transcript show: self pole printString.	Transcript show: ''; cr.  	1 to: (wierzcholki capacity) do: [:i|  	Transcript show: ' Nr: '.	Transcript show: (i printString).	Transcript show: ' x: '.	Transcript show: (wierzcholki at: i) x printString.	Transcript show: ' y: '.	Transcript show: (wierzcholki at: i) y printString.	Transcript show: ''; cr.  	]."Stampa""stampa le informazioni su un poligono"</body></methods><do-it>| r k |	r := (Romb new) initialize: 4.r drukuj.k := (Kwadrat new) initialize: 2.k drukuj.Transcript show: 'r+r'; cr.</do-it><methods><class-id>Wielokat</class-id> <category>accessing</category><body package="Programming Languages" selector="przesun">przesun " = shift = translation"	2 to: (wierzcholki capacity) do: [:i| 		wierzcholki at: i put: ((wierzcholki at: i ) x) @ (0 - ((wierzcholki at: i) y)).	].</body></methods><methods><class-id>Wielokat</class-id> <category>accessing</category><body package="Programming Languages" selector="przesun:">przesun: vector " = shift = translation"	1 to: (wierzcholki capacity) do: [:i| 		wierzcholki at: i put: ((wierzcholki at: i ) x) @ (0 - ((wierzcholki at: i) y)).	].</body></methods><remove-selector><class-id>Wielokat</class-id> <selector>przesun</selector></remove-selector><methods><class-id>Wielokat</class-id> <category>accessing</category><body package="Programming Languages" selector="przesun:">przesun: vector " = shift = translation"	1 to: (wierzcholki capacity) do: [:i| 		wierzcholki at: i put: ((wierzcholki at: i ) x) + (vector x) @ (0 - ((wierzcholki at: i) y)).	].</body></methods><methods><class-id>Wielokat</class-id> <category>accessing</category><body package="Programming Languages" selector="przesun:">przesun: vector " = shift = translation"	1 to: (wierzcholki capacity) do: [:i| 		wierzcholki at: i put: ((wierzcholki at: i ) x) + (vector x) @ ((wierzcholki at: i) y) + vector y.	].</body></methods><methods><class-id>Romb</class-id> <category>actions</category><body package="Programming Languages" selector="pole">pole 	"liczy pole szesciokata"		| side height |	side := (wierzcholki at: 2) x - (wierzcholki at: 1) x.	height:=((3 sqrt) / 2)*side.		^ (side * height).</body></methods><methods><class-id>Wielokat</class-id> <category>accessing</category><body package="Programming Languages" selector="przesun:">przesun: vector " = shift = translation"	1 to: (wierzcholki capacity) do: [:i| 		wierzcholki at: i put: ((wierzcholki at: i ) x) + vector x @ ((wierzcholki at: i) y) + vector y.	].</body></methods><do-it>| r k r1 r2 k1 |	r := (Romb new) initialize: 4.r drukuj.k := (Kwadrat new) initialize: 2.k drukuj.Transcript show: 'r+r'; cr.r1 := r przesun: 2@3.r1 drukuj.r2 := r1 + r1 + r1 + r1.r2 drukuj.Transcript show: 'r+k'; cr.k1 := k przesun: (1 negated)@(1negated).r2 := r1 + k1.r2 drukuj.</do-it><methods><class-id>Wielokat</class-id> <category>accessing</category><body package="Programming Languages" selector="przesun:">przesun: vector " = shift = translation"	1 to: (wierzcholki capacity) do: [:i| 		wierzcholki at: i put: (((wierzcholki at: i ) x) + vector x) @ (((wierzcholki at: i) y) + vector y).	].</body></methods><methods><class-id>Kwadrat</class-id> <category>actions</category><body package="Programming Languages" selector="pole">pole	"licz pole kwadratu"	"teacher version: ^(wierzcholki at: 2) x squared"	^((wierzcholki at: 2) - (wierzcholki at: 1)) x squared</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im' 'January 11, 2022' '6:25:42 PM')""An image file d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im was created at 18:25:42 on 11 gennaio 2022."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im' 'January 11, 2022' '6:26:37 PM')""An image file d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im was created at 18:26:37 on 11 gennaio 2022."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im' 'January 11, 2022' '6:26:50 PM')""An image file d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im was created at 18:26:50 on 11 gennaio 2022."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im' 'January 11, 2022' '6:26:55 PM')""An image file d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im was created at 18:26:55 on 11 gennaio 2022."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im' 'January 11, 2022' '6:27:20 PM')""An image file d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im was created at 18:27:20 on 11 gennaio 2022."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im' 'January 11, 2022' '6:29:43 PM')""An image file d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im was created at 18:29:43 on 11 gennaio 2022."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im' 'January 11, 2022' '6:30:54 PM')""An image file d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im was created at 18:30:54 on 11 gennaio 2022."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im' 'January 11, 2022' '6:30:59 PM')""An image file d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im was created at 18:30:59 on 11 gennaio 2022."</do-it><do-it>| r k r1 r2 k1 k2 |	r := (Romb new) initialize: 4.r drukuj.k := (Kwadrat new) initialize: 2.k drukuj.Transcript show: 'r+r'; cr.r1 := r przesun: 2@3.r1 drukuj.r2 := r1 + r1 + r1 + r1.r2 drukuj.Transcript show: 'r+k'; cr.k1 := k przesun: (1 negated)@(1negated).r2 := r1 + k1.r2 drukuj.Transcript show: 'k+r'; cr.k2 := k1 + r1.k2 drukuj.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im' 'January 12, 2022' '1:32:13 PM')""An image file d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im was created at 13:32:13 on 12 gennaio 2022."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im' 'January 12, 2022' '1:32:20 PM')""An image file d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im was created at 13:32:20 on 12 gennaio 2022."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im' 'January 12, 2022' '1:32:31 PM')""An image file d:\DriveUniversità\Università\Didattica\Corsi_Polonia\Programming_Languages\2.3.4.5.Programming_Languages_code\5.SmallTalk\CodeSmallTalk\MyHomeworkPolish\MyHomeworkPolish.im was created at 13:32:31 on 12 gennaio 2022."</do-it><do-it>| r |	r := (Romb new) initialize: 4.r drukuj.</do-it><do-it>r := (Romb new) initialize: 4.r drukuj.k := (Kwadrat new) initialize: 2.k drukuj.Transcript show: 'r+r'; cr.r1 := r przesun: 2@3.r1 drukuj.r2 := r1 + r1 + r1 + r1.r2 drukuj.Transcript show: 'r+k'; cr.k1 := k przesun: (1 negated)@(1negated).r2 := r1 + k1.r2 drukuj.Transcript show: 'k+r'; cr.k2 := k1 + r1.k2 drukuj.</do-it><do-it>r := (Romb new) initialize: 4.r drukuj.k := (Kwadrat new) initialize: 2.k drukuj.Transcript show: 'r+r'; cr.r1 := r przesun: 2@3.r1 drukuj.r2 := r1 + r1 + r1 + r1.r2 drukuj.Transcript show: 'r+k'; cr.k1 := k przesun: (1 negated)@(1negated).r2 := r1 + k1.r2 drukuj.Transcript show: 'k+r'; cr.k2 := k1 + r1.k2 drukuj.</do-it><do-it>r := (Romb new) initialize: 4.r drukuj.k := (Kwadrat new) initialize: 2.k drukuj.Transcript show: 'r+r'; cr.r1 := r przesun: 2@3.r1 drukuj.r2 := r1 + r1 + r1 + r1.r2 drukuj.Transcript show: 'r+k'; cr.k1 := k przesun: (1 negated)@(1negated).r2 := r1 + k1.r2 drukuj.Transcript show: 'k+r'; cr.k2 := k1 + r1.k2 drukuj. </do-it><do-it>r := (Romb new) initialize: 4.r drukuj.k := (Kwadrat new) initialize: 2.k drukuj.Transcript show: 'r+r'; cr.r1 := r przesun: 2@3.r1 drukuj.r2 := r1 + r1 + r1 + r1.r2 drukuj.Transcript show: 'r+k'; cr.k1 := k przesun: (1 negated)@(1negated).r2 := r1 + k1.r2 drukuj.Transcript show: 'k+r'; cr.k2 := k1 + r1.k2 drukuj. </do-it><do-it>r := (Romb new) initialize: 4.
r drukuj.
k := (Kwadrat new) initialize: 2.
k drukuj.
Transcript show: 'r+r'; cr.
r1 := r przesun: 2@3.
r1 drukuj.
r2 := r1 + r1 + r1 + r1.
r2 drukuj.
Transcript show: 'r+k'; cr.
k1 := k przesun: (1 negated)@(1
negated).
r2 := r1 + k1.
r2 drukuj.
Transcript show: 'k+r'; cr.
k2 := k1 + r1.
k2 drukuj. 
</do-it><methods><class-id>Kwadrat</class-id> <category>actions</category><body package="Programming Languages" selector="pole">pole	"calculate square area"	"teacher version: ^(wierzcholki at: 2) x squared"	^((wierzcholki at: 2) - (wierzcholki at: 1)) x squared</body></methods><methods><class-id>Romb</class-id> <category>initialize-release</category><body package="Programming Languages" selector="initialize:">initialize: bok "== side"		| height |	super initialize: 4 name: 'Romb'.	height:=((3 sqrt)/2)*bok.	wierzcholki at: 2 put: bok@0.	wierzcholki at: 3 put: (bok + (bok/2))@height.	wierzcholki at: 4 put: (bok/2)@height.	"bok == side""wierzcholki == vertice"</body></methods><methods><class-id>Romb</class-id> <category>actions</category><body package="Programming Languages" selector="pole">pole 			| side height |	side := (wierzcholki at: 2) x - (wierzcholki at: 1) x.	height:=((3 sqrt) / 2)*side.		^ (side * height).</body></methods><methods><class-id>Romb</class-id> <category>arithmetic</category><body package="Programming Languages" selector="+">+ figura	"add 2 figures in the sense of a field"	"aggiungi 2 cifre nel senso di un campo"		| newArea side newRhombus |		newArea:=self pole + figura pole.					"Calc the new area"	side := (newArea *2 / (3 sqrt)) sqrt.				"Calc the value of side from the new area"	newRhombus:= (Romb new) initialize: side.		"Create a rhombus"	^newRhombus									"return the rhombus"		"A = ((radice 3 ) / 4 ) L^2 --&gt; this is the formule for triangolo equilatero"</body></methods><do-it>r := (Romb new) initialize: 4.
r drukuj.
k := (Kwadrat new) initialize: 2.
k drukuj.
Transcript show: 'r+r'; cr.
r1 := r przesun: 2@3.
r1 drukuj.
r2 := r1 + r1 + r1 + r1.
r2 drukuj.
Transcript show: 'r+k'; cr.
k1 := k przesun: (1 negated)@(1
negated).
r2 := r1 + k1.
r2 drukuj.
Transcript show: 'k+r'; cr.
k2 := k1 + r1.
k2 drukuj. </do-it><do-it>r := (Romb new) initialize: 4.
r drukuj.
k := (Kwadrat new) initialize: 2.
k drukuj.
Transcript show: 'r+r'; cr.
r1 := r przesun: 2@3.
r1 drukuj.
r2 := r1 + r1 + r1 + r1.
r2 drukuj.
Transcript show: 'r+k'; cr.
k1 := k przesun: (1 negated)@(1
negated).
r2 := r1 + k1.
r2 drukuj.
Transcript show: 'k+r'; cr.
k2 := k1 + r1.
k2 drukuj. </do-it><methods><class-id>Kwadrat</class-id> <category>arithmetic</category><body package="Programming Languages" selector="+">+ figura	| p |	p:=self pole + figura pole.	^(Kwadrat new) initialize: p sqrt</body></methods><methods><class-id>Romb</class-id> <category>actions</category><body package="Programming Languages" selector="pole">pole 			| side height |	side := (wierzcholki at: 2) x - (wierzcholki at: 1) x.	height:=((3 sqrt) / 2)*side.		^ (side * height).</body></methods><methods><class-id>Romb</class-id> <category>initialize-release</category><body package="Programming Languages" selector="initialize:">initialize: bok "== side"		| height |	super initialize: 4 name: 'Romb'.	height:=((3 sqrt)/2)*bok.	wierzcholki at: 2 put: bok@0.	wierzcholki at: 3 put: (bok + (bok/2))@height.	wierzcholki at: 4 put: (bok/2)@height.	"bok == side""wierzcholki == vertice"</body></methods><do-it>r := (Romb new) initialize: 4.
r drukuj.
k := (Kwadrat new) initialize: 2.
k drukuj.
Transcript show: 'r+r'; cr.
r1 := r przesun: 2@3.
r1 drukuj.
r2 := r1 + r1 + r1 + r1.
r2 drukuj.
Transcript show: 'r+k'; cr.
k1 := k przesun: (1 negated)@(1
negated).
r2 := r1 + k1.
r2 drukuj.
Transcript show: 'k+r'; cr.
k2 := k1 + r1.
k2 drukuj. </do-it>