<?xml version="1.0"?><st-source><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/davide/VisualWorks Projects/Prova/Prova.im' 'January 7, 2022' '3:58:21 PM')""An image file /home/davide/VisualWorks Projects/Prova/Prova.im was created at 15:58:21 on 7 gennaio 2022."</do-it><component-created><name>Programming Languages</name> <type>package</type></component-created><component-property><name>Programming Languages</name> <type>package</type><property>comment</property> <value>'Programs for the Programming Languages course.'</value></component-property><class><name>Wielokat</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>wierzcholki nazwa </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JezykiProgramowania</category><attributes><package>Programming Languages</package></attributes></class><do-it>Object subclass: #Wielokat	instanceVariableNames: 'wierzcholki nazwa '	classVariableNames: ''	poolDictionaries: ''	category: 'JezykiProgramowania'</do-it><methods><class-id>Wielokat</class-id> <category>initialize-release</category><body package="Programming Languages" selector="initialize:name:">initialize: liczbaWierzcholkow name: nowaNazwa	"konstruktor obiektu - wielokata"	nazwa:=nowaNazwa.	wierzcholki:=Array new: liczbaWierzcholkow.	wierzcholki at: 1 put: 0@0.</body></methods><methods><class-id>Wielokat</class-id> <category>accessing</category><body package="Programming Languages" selector="nazwa">nazwa	"podaje nazwe wielokata"	^nazwa</body></methods><methods><class-id>Wielokat</class-id> <category>accessing</category><body package="Programming Languages" selector="nazwa:">nazwa: nowa_nazwa	"ustawia nowa nazwe wielokata"	nazwa:=nowa_nazwa</body></methods><class><name>Kwadrat</name><environment>Smalltalk</environment><super>Wielokat</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JezykiProgramowania</category><attributes><package>Programming Languages</package></attributes></class><do-it>Wielokat subclass: #Kwadrat	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'JezykiProgramowania'</do-it><methods><class-id>Kwadrat</class-id> <category>arithmetic</category><body package="Programming Languages" selector="+">+ figura	"dodaj 2 figury w sensie pola"	| p |	p:=self pole + figura pole.	^(Kwadrat new) initialize: p sqrt</body></methods><methods><class-id>Kwadrat</class-id> <category>actions</category><body package="Programming Languages" selector="pole">pole	"licz pole kwadratu"	^(wierzcholki at: 2) x squared</body></methods><methods><class-id>Kwadrat</class-id> <category>initialize-release</category><body package="Programming Languages" selector="initialize:">initialize: bok	"tworz kwadrat o podanym boku"	super initialize: 4 name: 'Kwadrat'.	wierzcholki at: 2 put: bok@0.	wierzcholki at: 3 put: bok@bok.	wierzcholki at: 4 put: 0@bok.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/davide/VisualWorks Projects/Prova/Prova.im' 'January 15, 2022' '10:29:14 PM')""An image file /home/davide/VisualWorks Projects/Prova/Prova.im was created at 22:29:14 on 15 gennaio 2022."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/media/davide/Volume1/DriveUniversità/Università/Didattica/Corsi_Polonia/Programming_Languages/2.3.4.5.Programming_Languages_code/5.SmallTalk/CodeSmallTalk/Prova.im' 'January 15, 2022' '10:29:59 PM')""An image file /media/davide/Volume1/DriveUniversità/Università/Didattica/Corsi_Polonia/Programming_Languages/2.3.4.5.Programming_Languages_code/5.SmallTalk/CodeSmallTalk/Prova.im was created at 22:29:59 on 15 gennaio 2022."</do-it><class><name>Trojkat</name><environment>Smalltalk</environment><super>Wielokat</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Programming Languages</package></attributes></class><methods><class-id>Trojkat</class-id> <category>initialize-release</category><body package="Programming Languages" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Trojkat class</class-id> <category>instance creation</category><body package="Programming Languages" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Trojkat</class-id> <category>initialize-release</category><body package="Programming Languages" selector="initialize:">initialize: bok	"tworz kwadrat o podanym boku"	super initialize: 6 name: 'Szesciokat'.	wierzcholki at: 2 put: bok@0.	wierzcholki at: 3 put: (bok * 1.5)@(bok * 3 sqrt * 0.5).	wierzcholki at: 4 put: bok@(bok * 3 sqrt).	wierzcholki at: 5 put: 0@(bok * 3 sqrt).	wierzcholki at: 6 put: (0 - (bok * 0.5))@(bok * 3 sqrt * 0.5).</body></methods><methods><class-id>Trojkat</class-id> <category>initialize-release</category><body package="Programming Languages" selector="initialize:">initialize: bok	"tworz kwadrat o podanym boku"	super initialize: 3 name: 'Trojkat'.	wierzcholki at: 2 put: bok@0.	wierzcholki at: 3 put: (bok * 1.5)@(bok * 3 sqrt * 0.5). "should be correct"</body></methods><do-it>Trojkat organization addCategory: #actions</do-it><methods><class-id>Trojkat</class-id> <category>actions</category><body package="Programming Languages" selector="pole">pole 	"liczy pole szesciokata"		| a b |	a := (wierzcholki at: 2) x.	b := (wierzcholki at: 2) y.		a&lt;b	ifTrue: [^b squared * 3 * 3 sqrt * 0.5] ifFalse: [^a squared * 3 * 3 sqrt * 0.5].</body></methods><methods><class-id>Trojkat</class-id> <category>actions</category><body package="Programming Languages" selector="pole">pole 	"liczy pole szesciokata"		| a b |	a := (wierzcholki at: 2) x.	b := (wierzcholki at: 3) y.		^a*b/2</body></methods><do-it>Trojkat organization addCategory: #arithmetic</do-it><methods><class-id>Trojkat</class-id> <category>arithmetic</category><body package="Programming Languages" selector="+">+ figura	"dodaj 2 figury w sensie pola"	| p nowe |	p:=self pole + figura pole.	nowe:=(Trojkat new) initialize: ( 2 * p / 3 / 3 sqrt ) sqrt.	^nowe"nowe=nuovo"</body></methods><methods><class-id>Trojkat</class-id> <category>initialize-release</category><body package="Programming Languages" selector="initialize:wysokosc:">initialize: base wysokosc: height	"tworz kwadrat o podanym boku"	super initialize: 3 name: 'Trojkat'.	wierzcholki at: 2 put: base@0.	wierzcholki at: 3 put: (base * 0.5)@height. "should be correct"</body></methods><remove-selector><class-id>Trojkat</class-id> <selector>initialize:</selector></remove-selector><do-it>t := (Trojkat new) initialize: 3wysokosc: 4.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/media/davide/Volume1/DriveUniversità/Università/Didattica/Corsi_Polonia/Programming_Languages/2.3.4.5.Programming_Languages_code/5.SmallTalk/CodeSmallTalk/Maciej/Prova.im' 'January 16, 2022' '12:48:10 AM')""An image file /media/davide/Volume1/DriveUniversità/Università/Didattica/Corsi_Polonia/Programming_Languages/2.3.4.5.Programming_Languages_code/5.SmallTalk/CodeSmallTalk/Maciej/Prova.im was created at 00:48:10 on 16 gennaio 2022."</do-it><methods><class-id>Wielokat</class-id> <category>accessing</category><body package="Programming Languages" selector="drukuj">drukuj	"drukuje informacje o wielokacie"		Transcript show: nazwa printString.	Transcript show: ''; cr.  	Transcript show: self pole printString.	Transcript show: ''; cr.  	1 to: (wierzcholki capacity) do: [:i|  	Transcript show: ' Nr: '.	Transcript show: (i printString).	Transcript show: ' x: '.	Transcript show: (wierzcholki at: i) x printString.	Transcript show: ' y: '.	Transcript show: (wierzcholki at: i) y printString.	Transcript show: ''; cr.  	]."Stampa""stampa le informazioni su un poligono"</body></methods><do-it>t := (Trojkat new) initialize: 3wysokosc: 4.</do-it><do-it>t := (Trojkat new) initialize: 3wysokosc: 4.</do-it><do-it>t := (Trojkat new) initialize: 3wysokosc: 4.</do-it><do-it>t := (Trojkat new) initialize: 3wysokosc: 4.t drukuj.</do-it><do-it>t := (Trojkat new) initialize: 3wysokosc: 4.t drukuj.</do-it><do-it>t := (Trojkat new) initialize: 3wysokosc: 4.t drukuj.</do-it><do-it>t := (Trojkat new) initialize: 3wysokosc: 4.t drukuj.</do-it><methods><class-id>Wielokat</class-id> <category>accessing</category><body package="Programming Languages" selector="drukuj">drukuj	"drukuje informacje o wielokacie"		Transcript show: nazwa printString.	Transcript show: ''; cr.  	Transcript show: ' Area: '.	Transcript show: self pole printString.	Transcript show: ''; cr.  	1 to: (wierzcholki capacity) do: [:i|  	Transcript show: ' Nr: '.	Transcript show: (i printString).	Transcript show: ' x: '.	Transcript show: (wierzcholki at: i) x printString.	Transcript show: ' y: '.	Transcript show: (wierzcholki at: i) y printString.	Transcript show: ''; cr.  	]."Stampa""stampa le informazioni su un poligono"</body></methods><do-it>t := (Trojkat new) initialize: 3wysokosc: 4.t drukuj.</do-it><do-it>t := (Trojkat new) initialize: 3wysokosc: 4.t drukuj.k := (Kwadrat new) initialize: 2.k drukuj.</do-it><do-it>t := (Trojkat new) initialize: 3wysokosc: 4.t drukuj.k := (Kwadrat new) initialize: 2.k drukuj.Transcript show: 't+t'; cr.</do-it><methods><class-id>Wielokat</class-id> <category>accessing</category><body package="Programming Languages" selector="obrot">obrot	"obraca wielokat o 90 stopni wedlug pierwszego wierzcholka"		2 to: (wierzcholki capacity) do: [:i| 		wierzcholki at: i put: (0 - ((wierzcholki at: i) y))@((wierzcholki at: i ) x).	].	</body></methods><do-it>t := (Trojkat new) initialize: 3wysokosc: 4.t drukuj.k := (Kwadrat new) initialize: 2.k drukuj.Transcript show: 't+t'; cr.t1 := t obrot.t1 drukuj.</do-it><methods><class-id>Trojkat</class-id> <category>arithmetic</category><body package="Programming Languages" selector="+">+ figura	"dodaj 2 figury w sensie pola"	| p nowe base height | 	base := (wierzcholki at: 2) x.	height := (wierzcholki at: 3) y.	p:=self pole + figura pole.	nowe:=(Trojkat new) initialize: ( 2 * p / 3 / 3 sqrt ) sqrt.	^nowe"nowe=nuovo"</body></methods><methods><class-id>Trojkat</class-id> <category>arithmetic</category><body package="Programming Languages" selector="+">+ figura	"dodaj 2 figury w sensie pola"	| newArea nowe base height k| 	base := (wierzcholki at: 2) x.	height := (wierzcholki at: 3) y.		newArea:=self pole + figura pole.		nowe:=(Trojkat new) initialize: ( 2 * newArea / 3 / 3 sqrt ) sqrt.	^nowe"nowe=nuovo"</body></methods><methods><class-id>Trojkat</class-id> <category>arithmetic</category><body package="Programming Languages" selector="+">+ figura	"dodaj 2 figury w sensie pola"	| newArea nowe base height k| 	base := (wierzcholki at: 2) x.	height := (wierzcholki at: 3) y.		newArea:=self pole + figura pole.	k:= (newArea * 2) / (base * height).	nowe:=(Trojkat new) initialize: base*k  wysokosc: height*k.	^nowe"nowe=nuovo"</body></methods><methods><class-id>Trojkat</class-id> <category>arithmetic</category><body package="Programming Languages" selector="+">+ figura	"dodaj 2 figury w sensie pola"	| newArea nowe base height k| 	base := (wierzcholki at: 2) x.	height := (wierzcholki at: 3) y.		newArea:=self pole + figura pole.	k:= (newArea * 2) / (base * height) sqrt.	nowe:=(Trojkat new) initialize: base*k  wysokosc: height*k.	^nowe"nowe=nuovo"</body></methods><do-it>t := (Trojkat new) initialize: 3wysokosc: 4.t drukuj.k := (Kwadrat new) initialize: 2.k drukuj.Transcript show: 't+t'; cr.t1 := t obrot.t1 drukuj.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/media/davide/Volume1/DriveUniversità/Università/Didattica/Corsi_Polonia/Programming_Languages/2.3.4.5.Programming_Languages_code/5.SmallTalk/CodeSmallTalk/Maciej/Prova.im' 'January 16, 2022' '3:50:50 PM')""An image file /media/davide/Volume1/DriveUniversità/Università/Didattica/Corsi_Polonia/Programming_Languages/2.3.4.5.Programming_Languages_code/5.SmallTalk/CodeSmallTalk/Maciej/Prova.im was created at 15:50:50 on 16 gennaio 2022."</do-it><do-it>t := (Trojkat new) initialize: 3wysokosc: 4.t drukuj.k := (Kwadrat new) initialize: 2.k drukuj.Transcript show: 't+t'; cr.t1 := t obrot.t1 drukuj.</do-it><do-it>t2 := t1 + t1 + t1 + t1.t2 drukuj.</do-it><methods><class-id>Trojkat</class-id> <category>actions</category><body package="Programming Languages" selector="pole">pole 	"liczy pole szesciokata"		| a b |	a := ((wierzcholki at: 2) x) abs.	b := ((wierzcholki at: 3) y) abs.		^a*b/2</body></methods><methods><class-id>Trojkat</class-id> <category>actions</category><body package="Programming Languages" selector="pole">pole 	"liczy pole szesciokata"		| b1 b2 c1 c2 |	b1 := ((wierzcholki at: 2) x).	b2 := ((wierzcholki at: 2) y).	c1 := ((wierzcholki at: 3) y) .	c2 :=  ((wierzcholki at: 3) x) abs.		b2 &lt; b1	ifTrue: [^((b1*c1)/2)] 	ifFalse: [^b2*c2/2].</body></methods><methods><class-id>Trojkat</class-id> <category>arithmetic</category><body package="Programming Languages" selector="+">+ figura	"dodaj 2 figury w sensie pola"	| newArea nowe base height h1 h2 k| 			base := ((wierzcholki at: 2) x) + ((wierzcholki at: 2) y).		h1 := ((wierzcholki at: 3) y) .	h2 :=  ((wierzcholki at: 3) x) abs.	height := (wierzcholki at: 3) y.		newArea:=self pole + figura pole.	k:= (newArea * 2) / (base * height) sqrt.	nowe:=(Trojkat new) initialize: base*k  wysokosc: height*k.	^nowe"nowe=nuovo"</body></methods><methods><class-id>Trojkat</class-id> <category>arithmetic</category><body package="Programming Languages" selector="+">+ figura	"dodaj 2 figury w sensie pola"	| newArea nowe base height h1 h2 k| 			base := ((wierzcholki at: 2) x) + ((wierzcholki at: 2) y).		h1 := ((wierzcholki at: 3) y) .	h2 :=  ((wierzcholki at: 3) x) abs.	height := (wierzcholki at: 3) y.		newArea:=self pole + figura pole.	k:= (newArea * 2) / (base * height) sqrt.	nowe:=(Trojkat new) initialize: base*k  wysokosc: height*k.	^nowe"nowe=nuovo"</body></methods><methods><class-id>Trojkat</class-id> <category>arithmetic</category><body package="Programming Languages" selector="+">+ figura	"dodaj 2 figury w sensie pola"	| newArea nowe base height b1 b2 h1 h2 k| 		b1 := ((wierzcholki at: 2) x).	b2 := ((wierzcholki at: 2) y).	h1 := ((wierzcholki at: 3) y) .	h2 :=  ((wierzcholki at: 3) x) abs.	b1 &gt; b2	ifTrue:[base:= b1. height:= h1.]	ifFalse:[base:= b2. height:= h2.].		newArea:=self pole + figura pole.	k:= (newArea * 2) / (base * height) sqrt.	nowe:=(Trojkat new) initialize: base*k  wysokosc: height*k.	^nowe"nowe=nuovo"</body></methods><do-it>t := (Trojkat new) initialize: 3wysokosc: 4.t drukuj.k := (Kwadrat new) initialize: 2.k drukuj.Transcript show: 't+t'; cr.t1 := t obrot.t1 drukuj.t2 := t1 + t1 + t1 + t1.t2 drukuj.Transcript show: 't+k'; cr.k1 := k obrot.t2 := t1 + k1.t2 drukuj.Transcript show: 'k+t'; cr.k2 := k1 + t1.k2 drukuj. </do-it><do-it>t := (Trojkat new) initialize: 3wysokosc: 4.t drukuj.k := (Kwadrat new) initialize: 2.k drukuj.Transcript show: 't+t'; cr.t1 := t obrot.t1 drukuj.t2 := t1 + t1 + t1 + t1.t2 drukuj.Transcript show: 't+k'; cr.k1 := k obrot.t2 := t1 + k1.t2 drukuj.Transcript show: 'k+t'; cr.k2 := k1 + t1.k2 drukuj. </do-it><do-it>t2 := t1 + t1 + t1 + t1.t2 drukuj.</do-it><do-it>t2 := t1 + t1 + t1 + t1.t2 drukuj.</do-it><methods><class-id>Trojkat</class-id> <category>arithmetic</category><body package="Programming Languages" selector="+">+ figura	"dodaj 2 figury w sensie pola"	| newArea nowe base height b1 b2 h1 h2 k| 		b1 := ((wierzcholki at: 2) x).	b2 := ((wierzcholki at: 2) y).	h1 := ((wierzcholki at: 3) y) .	h2 :=  ((wierzcholki at: 3) x) abs.	b1 &gt; b2	ifTrue:[base:= b1. height:= h1.]	ifFalse:[base:= b2. height:= h2.].		newArea:=self pole + figura pole.	k:= ((newArea * 2) / (base * height)) sqrt.	nowe:=(Trojkat new) initialize: base*k  wysokosc: height*k.	^nowe"nowe=nuovo"</body></methods><do-it>t := (Trojkat new) initialize: 3wysokosc: 4.t drukuj.k := (Kwadrat new) initialize: 2.k drukuj.Transcript show: 't+t'; cr.t1 := t obrot.t1 drukuj.t2 := t1 + t1 + t1 + t1.t2 drukuj.Transcript show: 't+k'; cr.k1 := k obrot.t2 := t1 + k1.t2 drukuj.Transcript show: 'k+t'; cr.k2 := k1 + t1.k2 drukuj. </do-it><do-it>t := (Trojkat new) initialize: 3wysokosc: 4.t drukuj.k := (Kwadrat new) initialize: 2.k drukuj.Transcript show: 't+t'; cr.t1 := t obrot.t1 drukuj.t2 := t1 + t1 + t1 + t1.t2 drukuj.Transcript show: 't+k'; cr.k1 := k obrot.t2 := t1 + k1.t2 drukuj.Transcript show: 'k+t'; cr.k2 := k1 + t1.k2 drukuj. </do-it><do-it>t2 := t1 + k1.t2 drukuj.</do-it><do-it>t2 := t1 + k1.t2 drukuj.</do-it><do-it>t2 := t1 + k1.t2 drukuj.</do-it><methods><class-id>Kwadrat</class-id> <category>actions</category><body package="Programming Languages" selector="pole">pole	"licz pole kwadratu"	^(wierzcholki at: 2) x squared + (wierzcholki at: 2) y squared</body></methods><do-it>t := (Trojkat new) initialize: 3wysokosc: 4.t drukuj.k := (Kwadrat new) initialize: 2.k drukuj.Transcript show: 't+t'; cr.t1 := t obrot.t1 drukuj.t2 := t1 + t1 + t1 + t1.t2 drukuj.Transcript show: 't+k'; cr.k1 := k obrot.t2 := t1 + k1.t2 drukuj.Transcript show: 'k+t'; cr.k2 := k1 + t1.k2 drukuj. </do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/media/davide/Volume1/DriveUniversità/Università/Didattica/Corsi_Polonia/Programming_Languages/2.3.4.5.Programming_Languages_code/5.SmallTalk/CodeSmallTalk/Maciej/Prova.im' 'January 16, 2022' '4:47:27 PM')""An image file /media/davide/Volume1/DriveUniversità/Università/Didattica/Corsi_Polonia/Programming_Languages/2.3.4.5.Programming_Languages_code/5.SmallTalk/CodeSmallTalk/Maciej/Prova.im was created at 16:47:27 on 16 gennaio 2022."</do-it><comment><class-id>Wielokat</class-id><body>Programs for the Programming Languages course.</body></comment>